var use ani kar na chahe because of scope problem {
}

typeof  undefined is undefined 
and  typeof  null is an object


// "33" => 33
// "33abc" => NaN not a number 
//  true => 1; false => 0

JavaScript is dynamically type language
Return type of variables in JavaScript

Primitive data type
       number = number
       string = String
       Boolean = Boolean
       null = object
       undefined= undefined
       sysmbol = symbol
       bigint = bigint

Non Primitive data type  // Reference
       Array = object
       Function = function
       object = object


Stack memeory  

primitive type 

variables declare ka duplicate mil tha hai

Heap 

non primitive

it gives Reference


rember glass ka glass 
kach ka glass 
utgaya
spred ...
...
..
.

(function vaibhav(){
    console.log("DB connected");
})()

false
0, null , undefined , "", -0 , Big int , NaN, On

true
"0" , "null", [],{} function(){}

const vaibhav = ()=>{}

check wheather array is empty or not
if(arr.length===0){
       console.log("Arr is empty)
}

check wheather object is empty or not


let obj={};
if(Object.keys(obj).length===0){
       console.log("Object is empty")
}


Nullish operator
let val1= null ?? 10;

when we console.log(val1) we get 10 
or otherwise
let val1 = 10 ?? 5

then it will print 10 the first value 

let val1 =null ?? 10 ?? 5
ans -- 10

Terniary operator

const icetea = 100;
icetea<=80 ? console.log("Less the 80") : console.log("Greater than 80")


JS asynchronous language h but uska default behaviour synchronous hota h. Us behavior ko hame forcefully bta kr async bnana pdta h. Sbse easy example h aapke settimeout or setinterval methods. Hope aur clear ho gya h ab.

promise who hai kya 

something that is going to happen in the future

404 is not an error
it's an request